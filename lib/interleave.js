// Generated by LiveScript 1.5.0
(function(){
  var Cantor, last, defIip, zeroBase, increment, limits, zero, one, two, allDone, state;
  Cantor = require('./pairings').Cantor;
  last = require('./helpers').last;
  defIip = Cantor;
  zeroBase = function(length){
    var i$, k, results$ = [];
    for (i$ = 0; i$ < length; ++i$) {
      k = i$;
      results$.push([k, 0]);
    }
    return results$;
  };
  increment = function(state, limits){
    var _state, i$, len$, k, s;
    _state = [];
    for (i$ = 0, len$ = state.length; i$ < len$; ++i$) {
      k = i$;
      s = state[i$];
      if (s[1] < limits[k] || limits[k] === 0) {
        _state.push([s[0], s[1] + 1]);
      }
    }
    return _state;
  };
  limits = [1, 0, 2, 0, 3, 0];
  zero = zeroBase(limits.length);
  one = increment(zero, limits);
  two = increment(one, limits);
  allDone = function(state, limits){
    var i$, len$, s, limit;
    for (i$ = 0, len$ = state.length; i$ < len$; ++i$) {
      s = state[i$];
      limit = limits[s[0]];
      if (limit === 0) {
        continue;
      } else {
        if (s[1] < limit - 1) {
          return false;
        }
      }
    }
    return true;
  };
  state = zero;
  console.log(two);
  console.log(allDone(two, limits));
  /*
  while not all-done( state, limits )
    console.log state
    state = increment( state, limits )
    #console.log state
  */
  /*
  # indexify
  indexify = ( l ) ->
  
    for i, k in l
      [ k, i ]
  
  test = [0,1,0,2,0,3]
  itest = indexify test
  
  console.log itest
  
  zero = ( l ) ->
    for i in l
      [ i[0], 0 ]
  
  zeros = zero itest
  console.log zeros
  
  upcount = ( limits, state ) ->
    _state = []
    for i, k in state
      if i[1] < limits[k][1] || limits[k][1] is 0
        _state.push [ i[0], i[1]+1 ]
    _state
  
  one = upcount( itest, zeros )
  two = upcount( itest, one )
  
  console.log two
  
  all-done = ( limits, state ) ->
    for l in limits
      is-done = l[1] is 0 or state[1] is l[1] - 1
      if not is-done return false
    true
  
  
  interleave = ( l, iip=def-iip  ) ->
    a = []
    limits = indexify l
    count = zero limits
    console.log count
    count = upcount( limits, count )
    console.log count
    #do
    #  a = a.concat count
    #  count = upcount( limits, count )
    #  console.log count
    #while not all-zero count
    a
  
  console.log interleave test
  */
}).call(this);
