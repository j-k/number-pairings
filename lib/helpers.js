// Generated by LiveScript 1.5.0
(function(){
  var say, fl, sq, tn, tr, ext, min, max, pow, log, minBound, maxBound, last, initial, minBoundOf, maxBoundOf, deleteAt, pushFront, list, plot, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  out$.say = say = console.log;
  out$.fl = fl = Math.floor;
  out$.sq = sq = function(x){
    return fl(Math.sqrt(x));
  };
  out$.tn = tn = function(x){
    return x * (x + 1) / 2;
  };
  out$.tr = tr = function(x){
    return fl((sq(1 + x * 8) - 1) / 2);
  };
  out$.ext = ext = function(x){
    return x - tn(tr(x));
  };
  out$.min = min = Math.min;
  out$.max = max = Math.max;
  out$.pow = pow = Math.pow;
  out$.log = log = Math.log;
  out$.minBound = minBound = function(a, b){
    if (a === 0) {
      return b;
    } else if (b === 0) {
      return a;
    } else {
      return min(a, b);
    }
  };
  out$.maxBound = maxBound = function(a, b){
    if (a === 0) {
      return a;
    } else if (b === 0) {
      return b;
    } else {
      return max(a, b);
    }
  };
  out$.last = last = function(it){
    return it[it.length - 1];
  };
  out$.initial = initial = function(it){
    return slice$.call(it, 0, it.length - 1);
  };
  out$.minBoundOf = minBoundOf = function(B){
    var ref$, pos, min, i$, to$, i, _min;
    ref$ = [0, B[0]], pos = ref$[0], min = ref$[1];
    for (i$ = 1, to$ = B.length; i$ < to$; ++i$) {
      i = i$;
      _min = minBound(min, B[i]);
      if (_min < min || min === 0) {
        ref$ = [i, _min], pos = ref$[0], min = ref$[1];
      }
    }
    return [pos, min];
  };
  out$.maxBoundOf = maxBoundOf = function(B){
    var ref$, pos, max, i$, to$, i, _max;
    ref$ = [0, B[0]], pos = ref$[0], max = ref$[1];
    for (i$ = 1, to$ = B.length; i$ < to$; ++i$) {
      i = i$;
      _max = minBound(max, B[i]);
      if (_max > max) {
        ref$ = [i, _max], pos = ref$[0], max = ref$[1];
      }
    }
    return [pos, max];
  };
  out$.deleteAt = deleteAt = function(A, pos){
    return slice$.call(A, 0, pos).concat(slice$.call(A, pos + 1, A.length));
  };
  out$.pushFront = pushFront = function(e, a){
    return [e].concat(a);
  };
  out$.list = list = function(p, sz){
    var out, _sz, i$, z, ref$, l, r, _z;
    sz == null && (sz = 10);
    out = '';
    _sz = minBound(sz, p.b[2]);
    for (i$ = 0; i$ < _sz; ++i$) {
      z = i$;
      ref$ = p.xy(z), l = ref$[0], r = ref$[1];
      _z = p.z(l, r);
      out += z + ' -> <' + l + ',' + r + '> -> ' + _z + '\n';
      if (_z !== z) {
        out += 'error\n';
      }
    }
    return out;
  };
  out$.plot = plot = function(p, x, y){
    var vals, max, sx, sy, i$, j, j$, i, val, valSize, out, str, k$, to$, k;
    x == null && (x = 5);
    y == null && (y = 5);
    vals = [];
    max = 0;
    sx = minBound(x, p.b[0]);
    sy = minBound(y, p.b[1]);
    say(sx, sy);
    for (i$ = 0; i$ < sy; ++i$) {
      j = i$;
      for (j$ = 0; j$ < sx; ++j$) {
        i = j$;
        val = p.z(i, j);
        vals.push(val);
        valSize = val.toString().length;
        if (valSize > max) {
          max = valSize;
        }
      }
    }
    out = '';
    max += 1;
    for (i$ = 0; i$ < sy; ++i$) {
      j = i$;
      for (j$ = 0; j$ < sx; ++j$) {
        i = j$;
        str = p.z(i, j) + '';
        if (str.length < max) {
          for (k$ = 0, to$ = max - str.length; k$ < to$; ++k$) {
            k = k$;
            str = ' ' + str;
          }
        }
        out += str;
        if (i < sx - 1) {
          out += ' ';
        }
      }
      out += '\n';
    }
    return out;
  };
}).call(this);
