// Generated by LiveScript 1.5.0
(function(){
  var ref$, last, pushFront, say, field, stackX, stackY, Cantor, defIip, select, composition, c;
  ref$ = require('./helpers'), last = ref$.last, pushFront = ref$.pushFront, say = ref$.say;
  ref$ = require('./pairings'), field = ref$.field, stackX = ref$.stackX, stackY = ref$.stackY, Cantor = ref$.Cantor;
  defIip = Cantor;
  select = function(x, y, iip){
    iip == null && (iip = defIip);
    if (x === 0 && y === 0) {
      return iip;
    } else if (x === 0) {
      return stackX(y);
    } else if (y === 0) {
      return stackY(x);
    } else {
      return field(x, y);
    }
  };
  composition = function(l, iip){
    var arity, pairings, i$, ref$, len$, i, newPairing;
    iip == null && (iip = defIip);
    arity = l.length;
    pairings = [select(l[arity - 2], l[arity - 1])];
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      i = ref$[i$];
      newPairing = select(l[i], pairings[0].b[2]);
      pairings = pushFront(newPairing, pairings);
    }
    return {
      b: l.concat([pairings[0].b[2]]),
      join: function(l){
        var k, n, i$, ref$, len$, i;
        k = l.length;
        if (k !== arity) {
          return;
        }
        n = pairings[k - 2].z(l[k - 2], l[k - 1]);
        for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
          i = ref$[i$];
          n = pairings[i].z(l[i], n);
        }
        return n;
        function fn$(){
          var i$, results$ = [];
          for (i$ = k - 3; i$ >= 0; --i$) {
            results$.push(i$);
          }
          return results$;
        }
      },
      split: function(n){
        var ref$, x, y, l, i$, to$, k;
        ref$ = pairings[0].xy(n), x = ref$[0], y = ref$[1];
        l = [x];
        if (pairings.length > 1) {
          for (i$ = 1, to$ = pairings.length; i$ < to$; ++i$) {
            k = i$;
            ref$ = pairings[k].xy(y), x = ref$[0], y = ref$[1];
            l.push(x);
          }
        }
        l.push(y);
        return l;
      }
    };
    function fn$(){
      var i$, results$ = [];
      for (i$ = arity - 3; i$ >= 0; --i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  if (require.main === module) {
    c = composition([2, 3]);
    say(c.split(0));
  } else {
    module.exports = {
      composition: composition
    };
  }
}).call(this);
